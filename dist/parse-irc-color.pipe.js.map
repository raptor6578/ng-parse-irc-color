{"version":3,"file":"parse-irc-color.pipe.js","sourceRoot":"","sources":["../parse-irc-color.pipe.ts"],"names":[],"mappings":"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","sourcesContent":["import { Pipe, PipeTransform } from '@angular/core';\nimport {DomSanitizer} from '@angular/platform-browser';\nimport IrcColor from './irc-color';\nimport {IParseColor} from './parse-irc-color';\n\n@Pipe({name: 'ircColor'})\n\nexport class ParseIrcColorPipe implements PipeTransform {\n\n  constructor(private sanitizer: DomSanitizer) {}\n\n  transform(input: string) {\n    const strings = input.split(String.fromCharCode(3));\n    if (strings.length > 1) {\n      const parseColor: IParseColor = {};\n      let indexWord = 0;\n      for (const string of strings) {\n        const color = string.substr(0, 5);\n        const colorSplit = color.split(' ')[0];\n        const colorMatch = colorSplit.match(/^\\D*(\\d+(?:\\,\\d+)?)/gm);\n        const isAColor = colorMatch ? colorMatch[0] : null || '';\n        const colorCodes = isAColor.split(',');\n        let indexCode = 0;\n        for (const colorCode of colorCodes) {\n          if (colorCode) {\n            if (indexCode === 0) {\n              parseColor.ircColorCode = colorCodes[0];\n              parseColor.htmlColorCode = IrcColor.parseColor(Number(colorCode));\n            }\n            if (indexCode === 1) {\n              parseColor.ircColorCode = colorCodes[0] + ',' + colorCodes[1];\n              parseColor.htmlColorCodeBackground = IrcColor.parseColor(Number(colorCode));\n            }\n            if (colorCodes.length === indexCode + 1 && parseColor.ircColorCode) {\n              const wordWithoutColorCode = string.replace(parseColor.ircColorCode, '');\n              strings[indexWord] = `<span style=\"color:${parseColor.htmlColorCode};`;\n              if (parseColor.htmlColorCodeBackground) {\n                strings[indexWord] += `background-color:${parseColor.htmlColorCodeBackground};`;\n              }\n              strings[indexWord] += `\">${wordWithoutColorCode}</span>`;\n            }\n          }\n          indexCode++;\n        }\n        indexWord++;\n      }\n      return this.sanitizer.bypassSecurityTrustHtml(strings.join(''));\n    } else {\n      return input;\n    }\n  }\n}\n"]}